# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type AssetTag @entity {
  id: ID! # assetId+tagName
  name: String
  normalizedName: String
  asset: Asset
}

type Asset @entity {
  id: ID! # hub
  bizId: String! @index @unique # 业务Id
  assetId: BigInt!
  hub: String!
  hubName: String
  publisher: String @index
  contentUri: String
  timestamp: BigInt @index
  hash: String
  lastUpdatedAt: BigInt @index
  query1: String @index # query1 and query2 are used for searching
  query2: String @index

  # metadata
  name: String
  type: String
  image: String
  description: String
  tags: [AssetTag!] @derivedFrom(field: "asset")
  metadata: JSON
  content: String
  metadataHistories: [AssetMetadataHistory!] @derivedFrom(field: "asset")
  attributes: [AttributeItem!]

  # collect
  collectModule: String
  collectModuleInitData: String
  collectNft: String
  collectCount: BigInt
  collectors: [Collector!] @derivedFrom(field: "asset")

  # gated
  gatedModule: String
  gatedModuleInitData: String

  curations: [CurationAsset!] @derivedFrom(field: "asset")
}

type AssetMetadataHistory @entity {
  id: ID! # Transaction hash
  asset: Asset
  timestamp: BigInt @index
  contentUri: String
  metadata: JSON
}

type Collector @entity {
  id: ID! # Transaction hash
  asset: Asset
  collector: String @index
  tokenId: BigInt
  collectModule: String
  collectModuleData: String
  timestamp: BigInt @index
}

type ContractInfo @entity {
  id: ID! # contractAddress
  name: String
  symbol: String
  description: String
  image: String
  bannerImage: String
  featuredImage: String
  externalLink: String
  collaborators: String
}

type AssetHub @entity {
  id: ID! # hub address
  management: String
  admin: String
  name: String @index(unique: true)
  isOpen: Boolean @index
  tokenCollectModule: String
  feeCollectModule: String
  nftGatedModule: String
  createAssetModule: String
  timestamp: BigInt @index
  implementation: String
  version: String
  hash: String
  metadata: JSON
}

type ModulesInfo {
  assetHubImpl: String
  tokenCreateModule: String
  collectNFT: String
  feeCollectModule: String
  tokenCollectModule: String
  nftGatedModule: String
}

type HubManager @entity {
  id: ID!
  timestamp: BigInt
  globalModule: String
  hubCreatorNft: String
  curation: String
  moudles: ModulesInfo
}

type CurationAsset @entity {
  curation: Curation
  asset: Asset
  status: Int
  expiry: BigInt
  timestamp: BigInt @index
  approveAt: BigInt
  hash: String
}

type CurationTag @entity {
  id: ID!
  curation: Curation
  name: String
  normalizedName: String
}

type AttributeItem {
  traitType: String
  displayType: String
  value: String
}

type Curation @entity {
  id: ID! # curation address
  tokenURI: String
  publisher: String @index
  status: Int
  expiry: BigInt
  hash: String
  timestamp: BigInt @index
  lastUpdatedAt: BigInt @index
  assets: [CurationAsset!] @derivedFrom(field: "curation")

  # metadata
  name: String
  description: String
  image: String
  bannerImage: String
  externalUrl: String
  backgroundColor: String
  tags: [CurationTag!] @derivedFrom(field: "curation")
  attributes: [AttributeItem]
  metadata: JSON
}
